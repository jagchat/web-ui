{
  "name": "stringbuilder",
  "version": "0.0.10",
  "description": "An String Builder for Node.js",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/delmosaurio/stringbuilder.git"
  },
  "bugs": {
    "url": "https://github.com/delmosaurio/stringbuilder/issues"
  },
  "keywords": [
    "string builder",
    "string",
    "builder",
    "regex",
    "format",
    "string format"
  ],
  "author": {
    "name": "Delmo Carrozzo",
    "email": "delmosaurio@gmail.com"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "2de2b4e533332cfcea5991b9d69a446f1b78132a",
  "dependencies": {
    "xregexp": "~2.0.0",
    "async": "~0.2.7",
    "numeral": "~1.4.8",
    "moment": "~2.0.0"
  },
  "devDependencies": {},
  "Stability": 2,
  "readme": "# StringBuilder [![Build Status](https://secure.travis-ci.org/delmosaurio/stringbuilder.png)](http://travis-ci.org/delmosaurio/stringbuilder)\r\n\r\nAn string builder for [Node.js](http://nodejs.org/)\r\n\r\n### npm install\r\n\r\n```\r\nnpm install stringbuilder\r\n```\r\n\r\n### Usage\r\n\r\n```js\r\nvar StringBuilder = require('stringbuilder')\r\n\r\n// create an StringBuilder();\r\nvar sb = new StringBuilder( {newline:'\\r\\n'} );\r\nvar sbInside = new StringBuilder( {newline:'\\r\\n'} );\r\n  \r\n// you can configure all new intances of the StringBuilder\r\n// as default win32='\\r\\n' others='\\n'\r\n// StringBuilder.configure({newline:'\\r\\n'});\r\n\r\nsb.append('some text') // append text\r\nsb.append('{0:YYYY}', new Date()) // append text formatted\r\nsb.appendLine('some text') // append a new line\r\nsb.appendLine('{0:$ 0.1}', 50.1044) // append a new line formatted\r\nab.append( sbInside );  // append other StringBuilder into sb\r\n                        // you can append text into `sbInside` after that                        \r\n\r\nsbInside.append('another text');\r\n\r\n```\r\n\r\nextends the String \r\n\r\n```js\r\nvar StringBuilder = require('stringbuilder')\r\n\r\nStringBuilder.extend('string');\r\n\r\n'The current year is {0:YYYY}'.format(new Date(2013)); // The current year is 2013\r\nor the same\r\nString.format('The current year is {0:YYYY}', new Date(2013)); // The current year is 2013\r\n```\r\n\r\n### example\r\n\r\n```js\r\nvar StringBuilder = require('stringbuilder')\r\n  , fs = require('fs');\r\n\r\n// Make an markdown file of the beatles\r\nvar data = {\r\n    band: \"The Beatles\"\r\n  , formed: new Date(1960)\r\n  , discography: [\r\n      { name: 'Sentimental Journey', created: new Date(1970), price: (Math.random()*10)+1 }\r\n    , { name: 'Beaucoups of Blues', created: new Date(1970), price: (Math.random()*10)+1 }\r\n    , { name: 'Ringo', created: new Date(1973), price: (Math.random()*10)+1 }\r\n    , { name: 'Goodnight Vienna', created: new Date(1974), price: (Math.random()*10)+1 }\r\n    , { name: 'Ringo\\'s Rotogravure', created: new Date(1976), price: (Math.random()*10)+1 }\r\n    , { name: 'Ringo the 4th', created: new Date(1977), price: (Math.random()*10)+1 }\r\n  ]\r\n};\r\n\r\nvar main = new StringBuilder()\r\n  , discography = new StringBuilder();\r\n\r\n// extend de String object\r\nStringBuilder.extend('string');\r\n\r\nvar filename = './{0}.md'.format(data.band);\r\n\r\nvar stream = fs.createWriteStream( filename );\r\n\r\nvar namesRegex = /(John|Paul|George|Ringo)\\s(Lennon|McCartney|Harrison|Starr)/g\r\n\r\nmain\r\n  .appendLine('{0}', data.band)\r\n  .appendLine()\r\n  .append('{0} were an English rock band formed in Liverpool in {1:YYYY}.', data.band, data.formed)\r\n  .append('They became the most commercially successful and critically ')\r\n  .append('acclaimed act in the rock music era. The group\\'s best-known ')\r\n  .appendLine('lineup consisted of John Lennon, Paul McCartney, George Harrison, and Ringo Starr.')\r\n  .replace(namesRegex, '[$1 $2](http://en.wikipedia.org/wiki/$1_$2)') // replace\r\n  .appendLine()\r\n  .appendLine('### Discography')\r\n  .appendLine()\r\n  .append(discography) // append an StringBuilder\r\n  .appendLine()\r\n  .appendLine('### Influences')  // then write more text\r\n  .appendLine()\r\n  .append('Their earliest influences include ')\r\n  .appendLine('Elvis Presley, Carl Perkins, Little Richard and Chuck Berry ...')\r\n  .appendLine()\r\n  .appendLine('### Genres')  \r\n  .appendLine('')\r\n  .append('Originating as a skiffle group, the Beatles quickly embraced 1950s ')\r\n  .append('rock and roll, and their repertoire ultimately expanded to include')\r\n  .appendLine('a broad variety of pop music ...')\r\n  .insert('## ', 0) // Insert text\r\n  ;\r\n\r\n// append into the discography stringbuilder\r\ndata.discography.forEach(function(disk){\r\n  discography.appendLine(' - {0} in {1:YYYY}   *{2:$ 0,0.00 } release price*', disk.name, disk.created, disk.price);\r\n});\r\n\r\nvar filename = './{0}.md'.format(data.band);\r\nvar stream = fs.createWriteStream( filename, 'utf-8' );\r\n\r\nmain.pipe(stream);\r\nmain.flush();\r\n```\r\n\r\noutput\r\n\r\n## The Beatles\r\n\r\nThe Beatles were an English rock band formed in Liverpool in 1969They became the most commercially successful and critically acclaimed act in the rock music era. The group's best-known lineup consisted of [John Lennon](http://en.wikipedia.org/wiki/John_Lennon), [Paul McCartney](http://en.wikipedia.org/wiki/Paul_McCartney), [George Harrison](http://en.wikipedia.org/wiki/George_Harrison), and [Ringo Starr](http://en.wikipedia.org/wiki/Ringo_Starr).\r\n\r\n### Discography\r\n\r\n - Sentimental Journey in 1969   *$ 3.474 release price*\r\n - Beaucoups of Blues in 1969   *$ 10.012 release price*\r\n - Ringo in 1969   *$ 3.375 release price*\r\n - Goodnight Vienna in 1969   *$ 2.687 release price*\r\n - Ringo's Rotogravure in 1969   *$ 7.972 release price*\r\n - Ringo the 4th in 1969   *$ 3.421 release price*\r\n\r\n### Influences\r\n\r\nTheir earliest influences include Elvis Presley, Carl Perkins, Little Richard and Chuck Berry ...\r\n\r\n### Genres\r\n\r\nOriginating as a skiffle group, the Beatles quickly embraced 1950s rock and roll, and their repertoire ultimately expanded to include a broad variety of pop music ...\r\n\r\n\r\n----------------------------------------\r\n\r\n### build html\r\n\r\nNOTE: The idea of this example is show you how create parts of one output string separately and then combine all of them, if you need makes html can use a template engine like [handlebars](http://handlebarsjs.com/), this is only an example\r\n\r\n```js\r\nvar html = new StringBuilder()\r\n  , head = new StringBuilder({ newline: '\\r\\n\\t' }) // add a tab at the end\r\n  , body = new StringBuilder({ newline: '\\r\\n\\t' }) // add a tab at the end\r\n  ;\r\n\r\nvar initTag, endTag, tag, attr, lorem;\r\n\r\ninitTag = '<{0}>';\r\nendTag = '</{0}>';\r\ntag = '{0}{{1}}{1}'.format(initTag, endTag);\r\nattr = '{0}=\"{1}\"';\r\nlorem = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.';\r\n\r\n// make the body\r\nbody.append('\\t')\r\n  .appendLine(tag.format('h1', 'StringBuilder example'))\r\n  .append(tag.format('p', lorem));\r\n\r\n// make the head\r\nhead.append('\\t')\r\n  .appendLine('<meta {0}>', attr.format('charset', 'UTF-8'))\r\n  .appendLine('<meta {0} {1}>', attr.format('http-equiv', 'X-UA-Compatible'), attr.format('content', 'IE=edge'))\r\n  .append(tag.format('title', 'Generate html with StringBuilder'));\r\n\r\n// make the html\r\nhtml.appendLine('<!doctype html>')\r\n  .appendLine('<html {0}>', attr.format('lang', 'en'))\r\n\r\n  // head\r\n  .appendLine(initTag.format('head'))\r\n  .append(head)\r\n  .appendLine()\r\n  .appendLine(endTag.format('head'))\r\n\r\n  // body\r\n  .appendLine(initTag.format('body'))\r\n  .append(body)\r\n  .appendLine()\r\n  .appendLine(endTag.format('body'))\r\n\r\n  .append(endTag.format('html'));\r\n```\r\n\r\noutput\r\n\r\n```html\r\n<!doctype html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n  <title>Generate html with StringBuilder</title>\r\n</head>\r\n<body>\r\n  <h1>StringBuilder example</h1>\r\n  <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\r\n</body>\r\n</html>\r\n```\r\n----------------------------------------\r\n\r\n### formats\r\n\r\nTo apply formats please see [moment](http://momentjs.com/) and [numeral](http://numeraljs.com/)\r\n\r\n```js\r\nvar sb = new StringBuilder();\r\n\r\nsb.append('{0:format}');\r\n\r\n```\r\n\r\ndates examples\r\n\r\n```js\r\nsb.append('{0:L}', new date());      // 04/29/2013\r\nsb.append('{0:LL}', new date());     // April 29 2013\r\nsb.append('{0:LLL}', new date());    // April 29 2013 9:13 AM\r\nsb.append('{0:LLLL}', new date());   // Monday, April 29 2013 9:13 AM\r\n```\r\n\r\nnumbers examples\r\n\r\n```js\r\nsb.append('{0:$0,0.00}', 1000.234);   // $0,000.23\r\nsb.append('{0:0%}', 1);               // 100%\r\nsb.append('{0:0b}', 100);             // 100B\r\nsb.append('{0:(0,0.0000)}', -10000);  // (10,000.0000)\r\n```\r\n\r\n## more information\r\n\r\n### build trough\r\n\r\nPlease see [async](https://github.com/caolan/async)\r\n\r\nThis is the way that the StringBuilder makes the output string.\r\n\r\n```\r\nwaterfall\r\n  |-parallel\r\n    |-sb.append(format, ...args)\r\n    |-sb.append(string)\r\n    |-sb.appendLine(format, ...args)\r\n    |-sb.appendLine(string)\r\n  |-sb.insert(...)\r\n  |-sb.replace(...)\r\n  |-parallel\r\n    |-sb.append(format, ...args)\r\n    |-sb.append(StringBuilder())\r\n    |-sb.appendLine(string)\r\n  |-sb.insert(...)\r\n  |-parallel\r\n    |-sb.append(format, ...args)\r\n```\r\n\r\n## license \r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2012-2013 Delmo Carrozzo &lt;dcardev@gmail.com&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "_id": "stringbuilder@0.0.10",
  "dist": {
    "shasum": "ea0544b8d3ca21fa56dddcfc4fab48cb8e856231",
    "tarball": "http://registry.npmjs.org/stringbuilder/-/stringbuilder-0.0.10.tgz"
  },
  "_from": "stringbuilder@*",
  "_npmVersion": "1.3.9",
  "_npmUser": {
    "name": "delmosaurio",
    "email": "delmosaurio@gmail.com"
  },
  "maintainers": [
    {
      "name": "delmosaurio",
      "email": "delmosaurio@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "ea0544b8d3ca21fa56dddcfc4fab48cb8e856231",
  "_resolved": "https://registry.npmjs.org/stringbuilder/-/stringbuilder-0.0.10.tgz"
}
